from gi.repository import Gtk, Adw
from pathlib import Path

from .neo_settings import NeoSettings


class ScrapySettingsDialog(Adw.Dialog):
    """Dialog for configuring Scrapy settings"""

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        self.set_title("Scrapy Settings")
        self.set_content_width(600)
        self.set_content_height(600)

        self.settings_manager = NeoSettings()
        self.settings = self.settings_manager.load_scrapy_settings()

        self._build_ui()

    def _build_ui(self):
        """Build settings interface"""
        content = Adw.ToolbarView()

        # Header
        header = Adw.HeaderBar()
        header.set_show_title(False)

        cancel_btn = Gtk.Button(label="Cancel")
        cancel_btn.connect("clicked", lambda b: self.close())
        header.pack_start(cancel_btn)

        save_btn = Gtk.Button(label="Save")
        save_btn.add_css_class("suggested-action")
        save_btn.connect("clicked", self.on_save_clicked)
        header.pack_end(save_btn)

        content.add_top_bar(header)

        # Settings page
        scrolled = Gtk.ScrolledWindow()
        scrolled.set_vexpand(True)

        prefs_page = Adw.PreferencesPage()

        # Performance
        perf_group = Adw.PreferencesGroup()
        perf_group.set_title("Performance")
        perf_group.set_margin_top(20)

        self.concurrent_row = Adw.SpinRow()
        self.concurrent_row.set_title("Concurrent Requests")
        self.concurrent_row.set_subtitle("Number of parallel requests")
        adjustment = Gtk.Adjustment(
            value=self.settings['CONCURRENT_REQUESTS'],
            lower=1, upper=100, step_increment=1
        )
        self.concurrent_row.set_adjustment(adjustment)
        perf_group.add(self.concurrent_row)

        self.delay_row = Adw.SpinRow()
        self.delay_row.set_title("Download Delay")
        self.delay_row.set_subtitle("Seconds between requests")
        self.delay_row.set_digits(1)
        adjustment = Gtk.Adjustment(
            value=self.settings['DOWNLOAD_DELAY'],
            lower=0, upper=10, step_increment=0.1
        )
        self.delay_row.set_adjustment(adjustment)
        perf_group.add(self.delay_row)

        self.autothrottle_row = Adw.SwitchRow()
        self.autothrottle_row.set_title("Auto Throttle")
        self.autothrottle_row.set_subtitle("Automatically adjust speed")
        self.autothrottle_row.set_active(self.settings['AUTOTHROTTLE_ENABLED'])
        perf_group.add(self.autothrottle_row)

        prefs_page.add(perf_group)

        # Behavior
        behavior_group = Adw.PreferencesGroup()
        behavior_group.set_title("Behavior")

        self.robotstxt_row = Adw.SwitchRow()
        self.robotstxt_row.set_title("Obey robots.txt")
        self.robotstxt_row.set_subtitle("Respect website's robots.txt rules")
        self.robotstxt_row.set_active(self.settings['ROBOTSTXT_OBEY'])
        behavior_group.add(self.robotstxt_row)

        self.cache_row = Adw.SwitchRow()
        self.cache_row.set_title("HTTP Cache")
        self.cache_row.set_subtitle("Cache responses to avoid re-downloading")
        self.cache_row.set_active(self.settings['HTTPCACHE_ENABLED'])
        behavior_group.add(self.cache_row)

        prefs_page.add(behavior_group)

        # User Agent
        ua_group = Adw.PreferencesGroup()
        ua_group.set_title("Identity")

        self.ua_row = Adw.EntryRow()
        self.ua_row.set_title("User Agent")
        self.ua_row.set_text(self.settings['USER_AGENT'])
        ua_group.add(self.ua_row)

        prefs_page.add(ua_group)

        scrolled.set_child(prefs_page)
        content.set_content(scrolled)
        self.set_child(content)

    def on_save_clicked(self, button):
        """Save settings"""
        self.settings['CONCURRENT_REQUESTS'] = int(self.concurrent_row.get_value())
        self.settings['DOWNLOAD_DELAY'] = self.delay_row.get_value()
        self.settings['AUTOTHROTTLE_ENABLED'] = self.autothrottle_row.get_active()
        self.settings['ROBOTSTXT_OBEY'] = self.robotstxt_row.get_active()
        self.settings['HTTPCACHE_ENABLED'] = self.cache_row.get_active()
        self.settings['USER_AGENT'] = self.ua_row.get_text()

        self.settings_manager.save_scrapy_settings(self.settings)
        self._apply_to_scrapy_project()

        self.close()

    def _apply_to_scrapy_project(self):
        """Apply settings to Scrapy settings.py"""
        project_path = Path.home() / ".config" / "neo" / "scrapy_project" / "neo_spiders"
        settings_file = project_path / "settings.py"

        if not settings_file.exists():
            return

        settings_content = f'''# Scrapy settings for neo_spiders project
# Generated by Neo

BOT_NAME = "neo_spiders"

SPIDER_MODULES = ["neo_spiders.spiders"]
NEWSPIDER_MODULE = "neo_spiders.spiders"

ROBOTSTXT_OBEY = {self.settings['ROBOTSTXT_OBEY']}
CONCURRENT_REQUESTS = {self.settings['CONCURRENT_REQUESTS']}
DOWNLOAD_DELAY = {self.settings['DOWNLOAD_DELAY']}
USER_AGENT = "{self.settings['USER_AGENT']}"

AUTOTHROTTLE_ENABLED = {self.settings['AUTOTHROTTLE_ENABLED']}
AUTOTHROTTLE_START_DELAY = 1
AUTOTHROTTLE_MAX_DELAY = 10

HTTPCACHE_ENABLED = {self.settings['HTTPCACHE_ENABLED']}
HTTPCACHE_EXPIRATION_SECS = 86400
HTTPCACHE_DIR = "httpcache"

REQUEST_FINGERPRINTER_IMPLEMENTATION = "2.7"
TWISTED_REACTOR = "twisted.internet.asyncioreactor.AsyncioSelectorReactor"
FEED_EXPORT_ENCODING = "utf-8"
'''

        settings_file.write_text(settings_content)
        print("âœ… Scrapy settings applied")
